using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace ProcessStartTest
{
    public partial class StartupForm : Form
    {
        public StartupForm()
        {
            InitializeComponent();
        }

        StreamWriter sortStreamWriter;
        StreamReader standardOutputStreamReader;
        Process process = new Process();
        public static  StringBuilder sb = new StringBuilder();

        public string attemptToRemoveUnwantedHeader(string output)
        {
            string searchkey = "All rights reserved.";
            int pos = output.IndexOf(searchkey);

            if(pos!=-1)
            {
                return output.Substring(pos + searchkey.Length);
            }

            return output;
        }
        public void StartNewProcess()
        {
            ProcessStartInfo info = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                ErrorDialog = false,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardError = true,
              //  RedirectStandardInput = true,
                RedirectStandardOutput = true            };

            if(txtParameter.Text.Trim().Length > 0)
            {
                info.RedirectStandardInput = true;
            }

            process.StartInfo = info;
           // process.EnableRaisingEvents = true;
          //  process.Exited += new EventHandler(Process_Exited);
          //  process.OutputDataReceived += new DataReceivedEventHandler(RedirectStandardOutputReceived);

            process.Start();

            if (txtParameter.Text.Trim().Length > 0)
            {
                sortStreamWriter = process.StandardInput;
                sortStreamWriter.WriteLine(txtParameter.Text.Trim());
                sortStreamWriter.Close();
            }

            string standardOutputText = process.StandardOutput.ReadToEnd();
            string error = process.StandardError.ReadToEnd();

            standardOutputText = attemptToRemoveUnwantedHeader(standardOutputText);

            txtResult.Text += standardOutputText;

            if(!string.IsNullOrEmpty(error))
            {
                txtResult.Text += Environment.NewLine + error;
            }

       //     process.BeginOutputReadLine();
      //      process.BeginErrorReadLine();
            process.WaitForExit();

            process.Close();
        }

        private void RedirectStandardOutputReceived(object sendingProcess,
            DataReceivedEventArgs outLine)
        {
            // Collect the sort command output.
            if (!String.IsNullOrEmpty(outLine.Data))
            {
                sb.AppendLine(outLine.Data);
            }
        }


        private void Process_Exited(object sender, System.EventArgs e)
        {
            MessageBox.Show("Proccss exited");
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
           // txtResult.Text = string.Empty;
            StartNewProcess();

        }
    }
}
